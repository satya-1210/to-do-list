{"version":3,"sources":["components/Form.js","components/Todo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","ToDo","todo","filteredTodos","map","item","filter","el","ToDoList","Todo","key","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","localtodos","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.055c258c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    }\n\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        if (inputText !== \"\") {\n            setTodos([\n                ...todos,\n                { text: inputText, \n                  completed: false,\n                  id: Math.random()*1000,\n                }\n            ]);\n\n            setInputText(\"\");\n        }\n    }\n\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n\n    return (\n        <form>\n            <input value={inputText} onChange={inputTextHandler} type='text' className=\"todo-input\"/>\n            <button onClick={submitTodoHandler} type='submit' className=\"todo-button\">\n                <span className=\"fas fa-plus-square\"></span>\n            </button>\n            <div className=\"select\">\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;","import React from 'react';\n\nconst ToDo = ({ text, todos, setTodos, todo, filteredTodos }) => {\n    const deleteHandler = () => {\n        setTodos(todos.filter( (el) => el.id !== todo.id));\n    }\n\n    const completeHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id) {\n                return {\n                    ...item, completed: !item.completed\n                }\n            }\n\n            return item;\n        }));\n    }\n\n    return (\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\n            \n            <button onClick={completeHandler} className=\"complete-btn\">\n                <span className=\"fas fa-check\"></span>\n            </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <span className=\"fas fa-trash\"></span>\n            </button>\n        </div>\n    );\n}\n\nexport default ToDo;","import React from 'react';\nimport Todo from './Todo';\n\nconst ToDoList = ({ todos, setTodos, filteredTodos }) => {\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map(todo => (\n                    <Todo \n                        key={todo.id} \n                        text={todo.text} \n                        todos={todos} \n                        setTodos={setTodos} \n                        todo={todo} \n                        filteredTodos={filteredTodos}/>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default ToDoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form'\nimport ToDoList from './components/ToDoList'\n\nfunction App() {\n  // States\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    if(localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }\n    else {\n      let localtodos = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(localtodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    switch(status) {\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n\n  }, [todos, status]);\n\n  return (\n    <div>\n      <header>\n        <h1>To Do List</h1>\n      </header>\n\n      <Form \n        inputText={inputText} \n        setInputText={setInputText} \n        todos={todos} \n        setTodos={setTodos} \n        setStatus={setStatus}/>\n\n      <ToDoList \n        todos={todos} \n        setTodos={setTodos} \n        filteredTodos={filteredTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}